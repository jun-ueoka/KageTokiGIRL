//***********************************************************************************
//!	ファイル名		Class_SceneEvent.h
//
//	機能			スタックを管理するクラスの定義
//	機能概要		スタックを管理する事で処理を分割する事を目的としたクラス
//	記述			上岡　純
//	プロジェクト	未定
//	更新			2008/09/27	<新規>
//***********************************************************************************

#pragma once

//-----------------------------------------------------------------------
//!	インターフェイスヘッダー
//-----------------------------------------------------------------------
#include	"Class_Scene.h"
#include	"Class_GraphicDevice.h"			//!< グラフィックデバイス
#include	"Class_Comment.h"				//!< コメント
#include	"Class_3DEffectCenter.h"		//!< エフェクトセンター
#include	"Class_FontBase.h"				//!< フォントベース

//-----------------------------------------------------------------------
//!	シーンの名前空間
//-----------------------------------------------------------------------
namespace SCE
{
	//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
	//!	クラス名		CSCENE_EVENT
	//
	//	機能			小分けされたシーン
	//	機能概要		主にゲームでなく、デモやムービーに使われる
	//	更新			2008/09/21	<新規>
	//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
	class CSCENE_EVENT
	{
			//==================================================================
			//	マクロ群
			//==================================================================
				#define	INVALID_NEXTSTACK	10000

	private:		//-------------------- private --------------------//

			//==================================================================
			//	タイマー関連属性
			//==================================================================
				BOOL	bTimer;							//!< タイマー確認
				int		iTimer;							//!< タイマー変数
				int		iTimerNextStack;				//!< タイマーの次のスタック

	protected:		//-------------------- protected --------------------//

			//==================================================================
			//	環境クラス
			//==================================================================
				CGRAPHIC_DEVICE*	gDev;				//!< グラフィックデバイス
				C3D_EFFECT_CENTER*	effect;				//!< エフェクトセンター
				CFONT_BASE*			font;				//!< フォントベース

			//==================================================================
			//	フラグ類
			//==================================================================
				int		iStack;							//!< スタック変数
				BOOL	bStatusEnd;						//!< 終了移行確認

				void	startStatus(int inAlpha);		//!< 開始
				void	endStatus(int inAlpha);			//!< 終了
				BOOL	checkStatus(void);				//!< 終了チェック

			//==================================================================
			//	タイマー関連操作
			//==================================================================
			//	タイマー作動
				void	initTimer(int inTime, int inStack, int inNextStack);
			//	タイマーチェック
				void	checkTimer(void);

	public:			//-------------------- public --------------------//

				CSCENE_EVENT(void);							//!< コンストラクタ
		virtual	~CSCENE_EVENT(void);						//!< デストラクタ
	};
}
//-----------------------------------------------------------------------
//!	シーンの名前空間
//-----------------------------------------------------------------------