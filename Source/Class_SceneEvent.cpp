//***********************************************************************************
//!	ファイル名		Class_SceneEvent.cpp
//
//	機能			スタックを管理するクラスの実装
//	機能概要		スタックを管理する事で処理を分割する事を目的としたクラス
//	記述			上岡　純
//	プロジェクト	未定
//	更新			2008/09/27	<新規>
//***********************************************************************************

//-----------------------------------------------------------------------
//!	インターフェイスヘッダー
//-----------------------------------------------------------------------
#include	"Precompiler.h"

//#include	"Class_SceneEvent.h"

//-----------------------------------------------------------------------
//!	シーンの名前空間
//-----------------------------------------------------------------------
namespace SCE
{
	//================================================================================
	//!	メソッド名	CSCENE_EVENT::コンストラクタ
	//
	//	更新		2008/09/27		<新規>
	//================================================================================
	CSCENE_EVENT::CSCENE_EVENT(void)
	{
	//	属性の初期化
		this->gDev				= CGRAPHIC_DEVICE::getInstance();
		this->effect			= C3D_EFFECT_CENTER::getInstance();
		this->font				= CFONT_BASE::getInstance();

		this->bStatusEnd		= FALSE;
		this->iStack			= 0;
		this->bTimer			= FALSE;
		this->iTimer			= 0;
		this->iTimerNextStack	= 0;
	}

	//================================================================================
	//!	メソッド名	CSCENE_EVENT::デストラクタ
	//
	//	更新		2008/09/27		<新規>
	//================================================================================
	CSCENE_EVENT::~CSCENE_EVENT(void)
	{
	//	ここで生成されたエフェクトを消去
		this->effect->finishalize();
	//	テキストの解放
		if(	this->font)	this->font->releaseText();
	}

	//================================================================================
	//!	メソッド名	CSCENE_EVENT::startStatus
	//
	//	機能		開始
	//	引数		inAlpha			幕のアルファ変動値
	//	更新		2008/09/27		<新規>
	//================================================================================
	void
	CSCENE_EVENT::startStatus(int inAlpha)
	{
	//	終了移行確認を無効
		this->bStatusEnd	= FALSE;
	//	幕を消滅
		this->gDev->curtainMotion(FALSE, inAlpha);
	}

	//================================================================================
	//!	メソッド名	CSCENE_EVENT::endStatus
	//
	//	機能		終了
	//	引数		inAlpha			幕のアルファ変動値
	//	更新		2008/09/27		<新規>
	//================================================================================
	void
	CSCENE_EVENT::endStatus(int inAlpha)
	{
	//	終了移行確認が既に有効なら処理しない
		if(	this->bStatusEnd)	return;
	//	終了移行確認を有効
		this->bStatusEnd	= TRUE;
	//	幕を出現
		this->gDev->curtainMotion(TRUE, inAlpha);
	}

	//================================================================================
	//!	メソッド名	CSCENE_EVENT::checkStatus
	//
	//	機能		終了チェック
	//	更新		2008/09/27		<新規>
	//================================================================================
	BOOL
	CSCENE_EVENT::checkStatus(void)
	{
	//	幕の描画
		this->gDev->renderCurtainInDev();
	//	終了移行確認が有効の時
		if(	this->bStatusEnd)
		{
		//	幕の透明度が最大なら、終了移行
			if(	this->gDev->getCurtainColorAlpha() >= 255)
			{
				return	FALSE;
			}
		}
		return	TRUE;
	}

	//================================================================================
	//!	メソッド名	CSCENE_EVENT::initTimer
	//
	//	機能		タイマー作動
	//	引数		inTime			次へのフレーム数
	//				inStack			新しいスタック
	//				inNextStack		次のスタック
	//	更新		2008/09/27		<新規>
	//================================================================================
	void
	CSCENE_EVENT::initTimer(int inTime, int inStack, int inNextStack)
	{
	//	タイマー作動中で無い時
		if(!this->bTimer)
		{
			this->bTimer			= TRUE;
			this->iTimer			= inTime;
			this->iStack			= inStack;
			this->iTimerNextStack	= inNextStack;
		}
	}

	//================================================================================
	//!	メソッド名	CSCENE_EVENT::checkTimer
	//
	//	機能		タイマーチェック
	//	更新		2008/09/27		<新規>
	//================================================================================
	void
	CSCENE_EVENT::checkTimer(void)
	{
	//	タイマー作動中で無い時
		if(	this->bTimer)
		{
		//	タイマー数値を減らしても、0以下にならない時
			if(	(this->iTimer - 1) > 0)
			{
				this->iTimer--;
			}
		//	0以下になる時
			else
			{
				this->iTimer	= 0;
				this->bTimer	= FALSE;

			//	次のスタックの数値が無効でなければ、移行する
				if(	this->iTimerNextStack < INVALID_NEXTSTACK)
				{
					this->iStack	= this->iTimerNextStack;
				}
			}
		}
	}
}
//-----------------------------------------------------------------------
//!	シーンの名前空間
//-----------------------------------------------------------------------