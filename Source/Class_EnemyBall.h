//***********************************************************************************
//!	ファイル名		Class_EnemyBall.h
//
//	機能			敵が放つ玉を扱うクラスの定義
//	記述			上岡　純
//	プロジェクト	未定
//	更新			2008/02/17	<新規>
//***********************************************************************************

#pragma	once

//-----------------------------------------------------------------------
//!	インターフェイスヘッダー
//-----------------------------------------------------------------------
#include	"Class_Mesh.h"					//!< 3Dオブジェクトメッシュ
#include	"Class_3DObjectGroup.h"			//!< 3Dオブジェクトグループ
#include	"Class_3DEffectCenter.h"		//!< エフェクト中枢

//-----------------------------------------------------------------------
//!	3Dオブジェクトの名前空間
//-----------------------------------------------------------------------
namespace O3D
{
	//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
	//	エネミーボールの種類制御
	//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
	enum	ENEMY_BALL_KIND
	{
		eENEMYB_STRAIGHT,					//!< 一直線に飛んで行く
		eENEMYB_SHADOLL_ARROW,				//!< 弓矢の様に飛んで行く(シャドール専用)
		eENEMYB_MAX,						//!< 種類の最大数
	};

	//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
	//!	クラス名		CENEMY_BALL
	//
	//	機能			敵が放つ玉を扱うクラス
	//	更新			2008/02/17	<新規>
	//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
	class	CENEMY_BALL : public CMESH
	{
	private:		//-------------------- private --------------------//

			//==================================================================
			//	エネミーボールの種類にで、処理検索
			//==================================================================
				BOOL							activate;			//!< 発射確認(TRUE = 発射済み)
				C3D_OBJECT_GROUP*				stageG;				//!< ステージグループ
				CKAGETOKI_ADVENT_CHARACTER**	player;				//!< プレイヤー
				ENEMY_BALL_KIND					ballKind;			//!< ボールの種類
				REACTION_MESSAGE				reactMessage;		//!< リアクションメッセージ

				char				effectName[EFFECT_NAME_MAX];	//!< 発生エフェクト名
				int					iEffectCnt;						//!< エフェクトの発生間隔
				int					iFrame;							//!< 描画フレーム
				D3DCOLOR			effectColor;					//!< エフェクトの色

	public:			//-------------------- public --------------------//

				CENEMY_BALL(CONST DEV inDev, ENEMY_BALL_KIND inKind, 
							LPSTR inMeshName, LPSTR inEffectName);
				CENEMY_BALL(CENEMY_BALL* inCopy);
		virtual	~CENEMY_BALL(void);

			//==================================================================
			//	access	衝突判定確認
			//==================================================================
				BOOL	getActivate(void)const					{ return	activate;			}

			//==================================================================
			//	access	発生エフェクト関連
			//==================================================================
				LPSTR	getEffectName(void)						{ return	effectName;			}
				int		getEffectCnt(void)const					{ return	iEffectCnt;			}
				void	setEffectCnt(int inValue)				{ iEffectCnt	= inValue;		}

			//==================================================================
			//	access	エフェクトの色
			//==================================================================
				D3DCOLOR	getEffectColor(void)const			{ return	effectColor;		}
				void		setEffectColor(D3DCOLOR inColor)	{ effectColor	= inColor;		}

			//==================================================================
			//	access	ボールの種類
			//==================================================================
				ENEMY_BALL_KIND	getBallKind(void)const				{ return	ballKind;		}
				void			setBallKind(ENEMY_BALL_KIND inKind)	{ ballKind	= inKind;		}

			//==================================================================
			//	access	メッセージ
			//==================================================================
				REACTION_MESSAGE	getReactMessage(void)const				{ return	reactMessage;		}
				void				setReactMessage(REACTION_MESSAGE inMsg)	{ reactMessage	= inMsg;		}

			//==================================================================
			//	発射(生成した後に使用)
			//==================================================================
				void	shot(VEC3* inAngle, VEC3* inLoc, C3D_OBJECT_GROUP* inStageG,
							 CKAGETOKI_ADVENT_CHARACTER** inPlayer, int inFrame);

			//==================================================================
			//	衝突判定
			//==================================================================
				void	intersectG(void);

			//==================================================================
			//	ボールの種類毎の分岐処理
			//==================================================================
				void	opeStraight(CONST DEV inDev);		//!< 一直線に飛んでいく処理
				void	opeShadollArrow(CONST DEV inDev);	//!< 弓矢の様に飛んでいく処理

			//==================================================================
			//	描画(サブクラスでオーバーライド可能)
			//==================================================================
				BOOL	draw(CONST DEV   inDev);
				BOOL	draw(CZTEX_SHA*  inZTexSha)	{ return	TRUE;	}
				BOOL	draw(CDEPTH_SHA* inDepthSha);
	};
}
//-----------------------------------------------------------------------
//!	3Dオブジェクトの名前空間
//-----------------------------------------------------------------------