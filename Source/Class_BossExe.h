//***********************************************************************************
//!	ファイル名		Class_BossExe.h
//
//	機能			ボスキャラクタークラス「エクス」の定義
//	記述			上岡　純
//	プロジェクト	[KageTokiGIRL]
//	更新			2009/01/13	<新規>
//***********************************************************************************

#pragma	once

//-----------------------------------------------------------------------
//!	インターフェイスヘッダー
//-----------------------------------------------------------------------
#include	"Class_KageTokiAdventBoss.h"	//!< アドベンチャーゲームボスベース
#include	"Class_Sound_OggVorbis.h"		//!< oggライブラリ(サウンドを発生させる為)

//-----------------------------------------------------------------------
//!	3Dオブジェクトの名前空間
//-----------------------------------------------------------------------
namespace O3D
{
	//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
	//	エクスの行動パターン
	//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
	enum	BOSSEXE_ACTION
	{
		eBEXEA_APPEAR,								//!< 出現時
		eBEXEA_APPEAR_WAIT,							//!< 出現待機時
		eBEXEA_WAIT,								//!< 待機時
		eBEXEA_DAMAGE,								//!< ダメージ反動時
		eBEXEA_DRILLCLAW_JUMP,						//!< ドリルクロー準備ジャンプ時
		eBEXEA_DRILLCLAW,							//!< ドリルクロー時
		eBEXEA_DASHCLAW_DASH,						//!< ダッシュクロー準備ダッシュ時
		eBEXEA_DASHCLAW,							//!< ダッシュクロー時
		eBEXEA_DISAPPEAR_WAIT,						//!< 消滅待機時
		eBEXEA_DISAPPEAR,							//!< 消滅時
		eBEXEA_MAX,									//!< 行動の最大数
	};

	//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
	//!	クラス名		CBOSS_EXE
	//
	//	機能			アドベンチャーゲームモードの「エクス」クラス
	//	更新			2008/12/09	<新規>
	//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
	class	CBOSS_EXE : public CKAGETOKI_ADVENT_BOSS
	{
			//==================================================================
			//	ボス「エクス」マクロ
			//==================================================================
				#define	NAME_EXE				"boss_exe"
				#define	EXE_MAXLIFE				10

	private:		//-------------------- private --------------------//

				BOSSEXE_ACTION	action;						//!< エクスの状態
				int				iAnimTemp[eBEXEA_MAX];		//!< アニメーションテンプレート
				int				iHitFrame;					//!< 衝突点滅フレーム

			//==================================================================
			//	サウンドデータ
			//==================================================================
				int				stepCnt;					//!< ステップカウンタ
				SSTATIC*		sStaticStep;				//!< 足音
				SSTATIC*		sStaticJumpStart;			//!< ジャンプ音
				SSTATIC*		sStaticJumpEnd;				//!< 着地音

				void	soundStep(void);					//!< 足音の発生
				void	soundJumpStart(void);				//!< ジャンプの発生
				void	soundJumpEnd(void);					//!< 着地音

			//==================================================================
			//	条件操作の処理分け
			//==================================================================
				void	opeAppear(void);					//!< 出現時
				void	opeAppearWait(void);				//!< 出現待機時
				void	opeWait(void);						//!< 待機時
				void	opeDamage(void);					//!< ダメージ反動時
				void	opeDrillClawJump(void);				//!< ドリルクロー準備ジャンプ時
				void	opeDrillClaw(void);					//!< ドリルクロー時
				void	opeDashClawDash(void);				//!< ダッシュクロー準備ダッシュ時
				void	opeDashClaw(void);					//!< ダッシュクロー時
				void	opeDisappearWait(void);				//!< 消滅待機時
				void	opeDisappear(void);					//!< 消滅時

	protected:		//-------------------- protected --------------------//

	public:			//-------------------- public --------------------//

				CBOSS_EXE(
					CONST DEV	inDev,
					CONST LPSTR	inName     = NAME_EXE,
					CONST LPSTR	inResource = PATH_SKINMESH,
					CONST LPSTR	inTexture  = PATH_SKINMESHTEX);	//!< コンストラクタ
		virtual	~CBOSS_EXE(void);

			//==================================================================
			//	状態変化
			//==================================================================
				BOOL	changeAction(BOSSEXE_ACTION inNewAction);

			//==================================================================
			//	リアクション(正式なアクションをするサブクラスでオーバーライド)
			//==================================================================
				void	reactionMessage(REACTION_MESSAGE inMessage);

			//==================================================================
			//	リセット
			//==================================================================
				void	resetParameter(void);

			//==================================================================
			//	基本操作
			//==================================================================
				void	operation(CINPUT* input);

			//==================================================================
			//	描画
			//==================================================================
				BOOL	draw(CONST DEV inDev);
	};
}
//-----------------------------------------------------------------------
//!	3Dオブジェクトの名前空間
//-----------------------------------------------------------------------