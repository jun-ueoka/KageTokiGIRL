//***********************************************************************************
//!	ファイル名		Class_ShadowObject.h
//
//	機能			影物体に関する定義
//	記述			上岡　純
//	プロジェクト	未定
//	更新			2008/08/29	<新規>
//***********************************************************************************

#pragma	once

//-----------------------------------------------------------------------
//!	インターフェイスヘッダー
//-----------------------------------------------------------------------
#include	"Class_Mesh.h"					//!< 3Dオブジェクトメッシュ
#include	"Class_TextureBase.h"			//!< テクスチャベース

//-----------------------------------------------------------------------
//!	3Dオブジェクトの名前空間
//-----------------------------------------------------------------------
namespace O3D
{
	//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
	//	影物体ファイルへのパス
	//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
	#define		PATH_SHADOW_OBJECT		"..//Resources//Data//ShadowObject//%s.sob"

	//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
	//	影物体構成タイプ
	//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
	typedef	enum	SHADOW_OBJ_TYPE
	{
		eSHAO_COMPLETE,			//!< 影も実体もある物体(完全実体)
		eSHAO_HALF_REAL,		//!< 影がない物体(半実体)
		eSHAO_HALF_SHADOW,		//!< 影だけの物体(半影物体)
		eSHAO_INCOMPLETE,		//!< 実体に影(影魔法)がついた物体(未完全実体)

		eSHAO_NONE,				//!< 影も実体もない状態
		eSHAO_MAX				//!< 影物体構成タイプの最大数

	}	SHAO_TYPE;

	//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
	//	影物体動作
	//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
	typedef	enum	SHADOW_OBJ_ACTION
	{
		eSHAOAC_SHADOW_REVIVAL,	//!< 影が付着していく
		eSHAOAC_SHADOW_DELETE,	//!< 影だけが消滅していく
		eSHAOAC_DELETE,			//!< 消滅していく

		eSHAOAC_NONE,			//!< 影物体動作なし
		eSHAOAC_MAX				//!< 影物体リアクションの最大数

	}	SHAOAC_TYPE;

	//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
	//	影物体データ
	//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
	struct SHADOW_OBJECT_DATA
	{
		int				cnt;			//!< 使用数
		string			name;			//!< 影物体データ
		CMESH_BASE*		shadowObj;		//!< 影メッシュ
		CMESH_BASE*		hitObj;			//!< 衝突判定用メッシュ

	//	実態化時の初期化
		SHADOW_OBJECT_DATA(void)
		{
			this->cnt		= 0;
			this->name		= "";
			this->shadowObj	= NULL;
			this->hitObj	= NULL;
		}
	//	解放
		~SHADOW_OBJECT_DATA(void)
		{
			SAFE_DELETE(this->shadowObj);
			SAFE_DELETE(this->hitObj);
		}
	};

	//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
	//!	クラス名		CSHADOW_OBJECT
	//
	//	機能			影物体(メッシュ版)
	//	更新			2008/08/29	<新規>
	//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
	class	CSHADOW_OBJECT : public C3D_OBJECT
	{
			//==================================================================
			//	生成拒否文字列
			//==================================================================
				#define	NONE_OBJECT				"NO_OBJECT"

			//==================================================================
			//	オブジェクトマクロ
			//==================================================================
				#define	CHANGE_VALUE_DIFFUSE	0.02f	//!< ディフューズ変動値

	private:		//-------------------- private --------------------//

			//==================================================================
			//	影物体マップ（インスタンスで共有される情報）
			//==================================================================
		static	map<string, SHADOW_OBJECT_DATA*>*		mShadowData;

			//==================================================================
			//	影物体データの生成
			//==================================================================
		static	SHADOW_OBJECT_DATA*	createShadowData(CONST DEV   inDev,
													 CONST LPSTR inName,
													 CONST LPSTR inResource = PATH_SHADOW_OBJECT);

			//==================================================================
			//	属性の初期準備
			//==================================================================
				void	startShadowObjectInitialize(void);

			//==================================================================
			//	エフェクトの初期化、解放
			//==================================================================
				void	initializeShadowObject(CONST DEV		inDev,
											   SHADOW_OBJ_TYPE	inType,
											   CONST LPSTR		inName,
											   CONST LPSTR		inResource);
				void	finishalizeShadowObject(void);

	protected:		//-------------------- protected --------------------//

			//==================================================================
			//	影物体情報ポインター
			//==================================================================
				SHADOW_OBJECT_DATA*		so_ptr;

			//==================================================================
			//	影物体のロード確認
			//==================================================================
				BOOL					bShadowObjectMeshLoaded;

			//==================================================================
			//	影物体のステータス
			//==================================================================
				SHADOW_OBJ_TYPE			shadowObjType;				//!< 影物体構成タイプ
				SHADOW_OBJ_ACTION		shadowObjAction;			//!< 影物体動作

			//==================================================================
			//	描画ディフューズ
			//==================================================================
				D3DCOLORVALUE			shadowDiffuse;

	public:			//-------------------- public --------------------//

				CSHADOW_OBJECT(CONST DEV       inDev,
							   SHADOW_OBJ_TYPE inType,
							   CONST LPSTR     inName,
							   CONST LPSTR     inResource	= PATH_SHADOW_OBJECT);
				CSHADOW_OBJECT(void);								//!< コンストラクタ(空初期化)
				CSHADOW_OBJECT(CSHADOW_OBJECT* inCopy);				//!< コピー
		virtual	~CSHADOW_OBJECT(void);

			//==================================================================
			//	access	影物体情報
			//==================================================================
				SHADOW_OBJECT_DATA*	getShadowObjects(void)const			{ return	so_ptr;			}

			//==================================================================
			//	access	影物体の構成
			//==================================================================
				SHADOW_OBJ_TYPE	getShadowObjType(void)const				{ return	shadowObjType;	}
				void			setShadowObjType(SHADOW_OBJ_TYPE inType);

			//==================================================================
			//	リアクション
			//==================================================================
				void	reactionMessage(REACTION_MESSAGE inMessage);

			//==================================================================
			//	影物体の動作
			//==================================================================
				void	actionShadowObj(void);

			//==================================================================
			//	ワールド座標系の中心点
			//==================================================================
				VEC3	getWorldCenter(void);

			//==================================================================
			//	ワールド座標系の半径
			//==================================================================
				float	getWorldRadius(void)
				{
					if(so_ptr)	{ return so_ptr->shadowObj->getMeshs()->localRadius * getScale();	}
					else		{ return C3D_OBJECT::getWorldRadius();								}
				}

			//==================================================================
			//	対象のＸメッシュとの衝突判定(簡易版)
			//==================================================================
				BOOL	intersectMesh(C3D_OBJECT* inObject, VEC3* inRayLoc, LINE* inLine, float* inDist);

			//==================================================================
			//	自身とオブジェクトとの、半径での初期衝突判定
			//==================================================================
				BOOL	intersectObject(C3D_OBJECT* inObject);

			//==================================================================
			//	メッセージ別衝突判定
			//==================================================================
				BOOL	intersectMsgCheck(THIS_MESSAGE inCheckMsg);

			//==================================================================
			//	全方向、上下、左右、前後で、衝突判定(サブクラスでオーバーライド可能)
			//==================================================================
		virtual	BOOL	intersect(C3D_OBJECT* inObject, LINE* inLine);
		virtual	BOOL	intersect(C3D_OBJECT* inObject, LINE_UPDOWN inUpDown);
		virtual	BOOL	intersect(C3D_OBJECT* inObject, LINE_LEFTRIGHT inLeftRight);
		virtual	BOOL	intersect(C3D_OBJECT* inObject, LINE_FRONTREAR inFrontRear);

			//==================================================================
			//	全方向、上下、左右、前後に、指定した距離で衝突判定(サブクラスでオーバーライド可能)
			//==================================================================
		virtual	BOOL	intersect(C3D_OBJECT* inObject, LINE* inLine, float inIntersectValue);
		virtual	BOOL	intersect(C3D_OBJECT* inObject, LINE_UPDOWN inUpDown, float inIntersectValue);
		virtual	BOOL	intersect(C3D_OBJECT* inObject, LINE_LEFTRIGHT inLeftRight, float inIntersectValue);
		virtual	BOOL	intersect(C3D_OBJECT* inObject, LINE_FRONTREAR inFrontRear, float inIntersectValue);

			//==================================================================
			//	描画
			//==================================================================
		virtual	BOOL	draw(CONST DEV		inDev);
		virtual	BOOL	draw(CZTEX_SHA*		inZTexSha);
		virtual	BOOL	draw(CDEPTH_SHA*	inDepthSha);
	};
}
//-----------------------------------------------------------------------
//!	3Dオブジェクトの名前空間
//-----------------------------------------------------------------------